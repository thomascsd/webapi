// Generated by CodiumAI

import { PlatformTest } from '@tsed/common';
import { ForecastService } from './ForecastService.mjs';

/*
Code Analysis

Main functionalities:
The ForecastService class is responsible for fetching weather forecast data from the Weatherbit API. It provides two methods for getting weather data: getDays() which takes latitude and longitude as parameters and returns the daily forecast for the given location, and getLocation() which takes a city name as a parameter and returns the daily forecast for that city.

Methods:
- getDays(lat: number, lon: number): This method takes latitude and longitude as parameters and returns the daily forecast for the given location. It constructs a URL using the apiUrl and apiKey fields, and makes a GET request to the Weatherbit API using axios. It returns the response data as a Daily object.
- getLocation(city: string): This method takes a city name as a parameter and returns the daily forecast for that city. It constructs a URL using the apiUrl and apiKey fields, and makes a GET request to the Weatherbit API using axios. It returns the response data as a Daily object.

Fields:
- apiUrl: This field stores the base URL for the Weatherbit API.
- apiKey: This field is annotated with @Value('WEATHERBIT_API_KEY') and is used to inject the API key from the environment. It stores the API key used to authenticate requests to the Weatherbit API.
*/

describe('ForecastService_class', () => {
  beforeEach(PlatformTest.create);
  afterEach(PlatformTest.reset);

  // Tests that getDays method returns data with valid latitude and longitude
  it('test_get_days_valid_lat_lon', async () => {
    const forecastService = PlatformTest.get<ForecastService>(ForecastService);
    const lat = 37.7749;
    const lon = -122.4194;
    const res = await forecastService.getDays(lat, lon);
    expect(res.city_name).toBe('San Francisco');
  });

  // Tests that getLocation method returns data with valid city name
  it('test_get_location_valid_city', async () => {
    const forecastService = PlatformTest.get<ForecastService>(ForecastService);
    const city = 'San Francisco';
    const res = await forecastService.getLocation(city);
    expect(res.city_name).toBe('San Francisco');
  });

  // Tests that getDays method throws an error with invalid latitude and longitude
  it('test_get_days_invalid_lat_lon', async () => {
    const forecastService = PlatformTest.get<ForecastService>(ForecastService);
    const lat = 1000;
    const lon = -2000;
    await expect(forecastService.getDays(lat, lon)).rejects.toThrow();
  });

  // Tests that getLocation method throws an error with invalid city name
  it('test_get_location_invalid_city', async () => {
    const forecastService = PlatformTest.get<ForecastService>(ForecastService);
    const city = 'Invalid City';
    await expect(forecastService.getLocation(city)).rejects.toThrow();
  });

  // Tests that getDays method throws an error with empty response
  it('test_get_days_empty_response', async () => {
    const forecastService = PlatformTest.get<ForecastService>(ForecastService);
    const lat = 0;
    const lon = 0;
    await expect(forecastService.getDays(lat, lon)).rejects.toThrow();
  });

  // Tests that getLocation method throws an error with empty response
  it('test_get_location_empty_response', async () => {
    const forecastService = PlatformTest.get<ForecastService>(ForecastService);
    const city = 'Empty City';
    await expect(forecastService.getLocation(city)).rejects.toThrow();
  });
});
